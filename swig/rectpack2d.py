# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rectpack2d
else:
    import _rectpack2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rectpack2d.delete_SwigPyIterator

    def value(self):
        return _rectpack2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rectpack2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rectpack2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rectpack2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rectpack2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rectpack2d.SwigPyIterator_copy(self)

    def next(self):
        return _rectpack2d.SwigPyIterator_next(self)

    def __next__(self):
        return _rectpack2d.SwigPyIterator___next__(self)

    def previous(self):
        return _rectpack2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rectpack2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rectpack2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rectpack2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rectpack2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rectpack2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rectpack2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rectpack2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rectpack2d:
_rectpack2d.SwigPyIterator_swigregister(SwigPyIterator)
class rect_wh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rectpack2d.rect_wh_swiginit(self, _rectpack2d.new_rect_wh(*args))
    w = property(_rectpack2d.rect_wh_w_get, _rectpack2d.rect_wh_w_set)
    h = property(_rectpack2d.rect_wh_h_get, _rectpack2d.rect_wh_h_set)

    def max_side(self):
        return _rectpack2d.rect_wh_max_side(self)

    def min_side(self):
        return _rectpack2d.rect_wh_min_side(self)

    def area(self):
        return _rectpack2d.rect_wh_area(self)

    def perimeter(self):
        return _rectpack2d.rect_wh_perimeter(self)
    __swig_destroy__ = _rectpack2d.delete_rect_wh

# Register rect_wh in _rectpack2d:
_rectpack2d.rect_wh_swigregister(rect_wh)
cvar = _rectpack2d.cvar
max_side = cvar.max_side
discard_step = cvar.discard_step
runtime_flipping_mode = cvar.runtime_flipping_mode

class rect_xywh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_rectpack2d.rect_xywh_x_get, _rectpack2d.rect_xywh_x_set)
    y = property(_rectpack2d.rect_xywh_y_get, _rectpack2d.rect_xywh_y_set)
    w = property(_rectpack2d.rect_xywh_w_get, _rectpack2d.rect_xywh_w_set)
    h = property(_rectpack2d.rect_xywh_h_get, _rectpack2d.rect_xywh_h_set)

    def __init__(self, *args):
        _rectpack2d.rect_xywh_swiginit(self, _rectpack2d.new_rect_xywh(*args))

    def area(self):
        return _rectpack2d.rect_xywh_area(self)

    def perimeter(self):
        return _rectpack2d.rect_xywh_perimeter(self)
    __swig_destroy__ = _rectpack2d.delete_rect_xywh

# Register rect_xywh in _rectpack2d:
_rectpack2d.rect_xywh_swigregister(rect_xywh)
class rect_xywhf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_rectpack2d.rect_xywhf_x_get, _rectpack2d.rect_xywhf_x_set)
    y = property(_rectpack2d.rect_xywhf_y_get, _rectpack2d.rect_xywhf_y_set)
    w = property(_rectpack2d.rect_xywhf_w_get, _rectpack2d.rect_xywhf_w_set)
    h = property(_rectpack2d.rect_xywhf_h_get, _rectpack2d.rect_xywhf_h_set)
    flipped = property(_rectpack2d.rect_xywhf_flipped_get, _rectpack2d.rect_xywhf_flipped_set)

    def __init__(self, *args):
        _rectpack2d.rect_xywhf_swiginit(self, _rectpack2d.new_rect_xywhf(*args))

    def area(self):
        return _rectpack2d.rect_xywhf_area(self)

    def perimeter(self):
        return _rectpack2d.rect_xywhf_perimeter(self)
    __swig_destroy__ = _rectpack2d.delete_rect_xywhf

# Register rect_xywhf in _rectpack2d:
_rectpack2d.rect_xywhf_swigregister(rect_xywhf)
class vec_rect_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _rectpack2d.vec_rect_type_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rectpack2d.vec_rect_type___nonzero__(self)

    def __bool__(self):
        return _rectpack2d.vec_rect_type___bool__(self)

    def __len__(self):
        return _rectpack2d.vec_rect_type___len__(self)

    def __getslice__(self, i, j):
        return _rectpack2d.vec_rect_type___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rectpack2d.vec_rect_type___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rectpack2d.vec_rect_type___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rectpack2d.vec_rect_type___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rectpack2d.vec_rect_type___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rectpack2d.vec_rect_type___setitem__(self, *args)

    def pop(self):
        return _rectpack2d.vec_rect_type_pop(self)

    def append(self, x):
        return _rectpack2d.vec_rect_type_append(self, x)

    def empty(self):
        return _rectpack2d.vec_rect_type_empty(self)

    def size(self):
        return _rectpack2d.vec_rect_type_size(self)

    def swap(self, v):
        return _rectpack2d.vec_rect_type_swap(self, v)

    def begin(self):
        return _rectpack2d.vec_rect_type_begin(self)

    def end(self):
        return _rectpack2d.vec_rect_type_end(self)

    def rbegin(self):
        return _rectpack2d.vec_rect_type_rbegin(self)

    def rend(self):
        return _rectpack2d.vec_rect_type_rend(self)

    def clear(self):
        return _rectpack2d.vec_rect_type_clear(self)

    def get_allocator(self):
        return _rectpack2d.vec_rect_type_get_allocator(self)

    def pop_back(self):
        return _rectpack2d.vec_rect_type_pop_back(self)

    def erase(self, *args):
        return _rectpack2d.vec_rect_type_erase(self, *args)

    def __init__(self, *args):
        _rectpack2d.vec_rect_type_swiginit(self, _rectpack2d.new_vec_rect_type(*args))

    def push_back(self, x):
        return _rectpack2d.vec_rect_type_push_back(self, x)

    def front(self):
        return _rectpack2d.vec_rect_type_front(self)

    def back(self):
        return _rectpack2d.vec_rect_type_back(self)

    def assign(self, n, x):
        return _rectpack2d.vec_rect_type_assign(self, n, x)

    def resize(self, *args):
        return _rectpack2d.vec_rect_type_resize(self, *args)

    def insert(self, *args):
        return _rectpack2d.vec_rect_type_insert(self, *args)

    def reserve(self, n):
        return _rectpack2d.vec_rect_type_reserve(self, n)

    def capacity(self):
        return _rectpack2d.vec_rect_type_capacity(self)
    __swig_destroy__ = _rectpack2d.delete_vec_rect_type

# Register vec_rect_type in _rectpack2d:
_rectpack2d.vec_rect_type_swigregister(vec_rect_type)

def find_best_packing_spaces_type(rectangles):
    return _rectpack2d.find_best_packing_spaces_type(rectangles)

def find_best_packing_dont_sort_spaces_type(rectangles):
    return _rectpack2d.find_best_packing_dont_sort_spaces_type(rectangles)

